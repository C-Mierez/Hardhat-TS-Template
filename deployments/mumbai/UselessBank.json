{
  "address": "0x20e0C0026C54cF9d29A8A7E5A0606E2417c45F12",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnauthorizedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        }
      ],
      "name": "UnexpectedCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allow",
          "type": "bool"
        }
      ],
      "name": "authorizeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66b4672a9ce59d7c05bbee58c2c93815b9574915a23c2962215ec9c4603343e7",
  "receipt": {
    "to": null,
    "from": "0xcc152e08f27C284ad49e39F8D98e608dE721bfDE",
    "contractAddress": "0x20e0C0026C54cF9d29A8A7E5A0606E2417c45F12",
    "transactionIndex": 68,
    "gasUsed": "755294",
    "logsBloom": "0x
    "blockHash": "0x73e259d6bf796c901a4c2364f29503bfd579e6b763cac83ad6f98f6e5855d61d",
    "transactionHash": "0x66b4672a9ce59d7c05bbee58c2c93815b9574915a23c2962215ec9c4603343e7",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 26590601,
        "transactionHash": "0x66b4672a9ce59d7c05bbee58c2c93815b9574915a23c2962215ec9c4603343e7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cc152e08f27c284ad49e39f8d98e608de721bfde",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000003e0174190ab120000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000199811bc8b5e94ebe3720000000000000000000000000000000000000000000000000ddcd69c65d354ee00000000000000000000000000000000000000000000199811c06b75d67c8e84",
        "logIndex": 141,
        "blockHash": "0x73e259d6bf796c901a4c2364f29503bfd579e6b763cac83ad6f98f6e5855d61d"
      }
    ],
    "blockNumber": 26590601,
    "cumulativeGasUsed": "4924255",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b9c721a807def47fffbb0756f4543be2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnauthorizedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"}],\"name\":\"UnexpectedCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"authorizeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"NotEnoughBalance()\":[{\"notice\":\"Emitted when the user's balance is lower than requested.\"}],\"UnauthorizedToken(address)\":[{\"notice\":\"Emitted when the submitted token is not allowed.\"}],\"UnexpectedCaller(address,address)\":[{\"notice\":\"Emitted when the caller is not the expected address\"}],\"ZeroAddress()\":[{\"notice\":\"Emitted when the submitted address is the zero address\"}],\"ZeroValue()\":[{\"notice\":\"Emitted when the submitted value is zero.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UselessBank.sol\":\"UselessBank\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/UselessBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./abstract/Base.sol\\\";\\nimport \\\"./interfaces/IUselessBank.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract UselessBank is IUselessBank, Base {\\n    address private immutable i_owner;\\n\\n    /// @notice Stores the user's balance of a certain token.\\n    /// User -> Token -> Balance\\n    mapping(address => mapping(IERC20 => uint256)) private s_balanceOf;\\n\\n    /// @notice Stores whether a certain token is allowed to be used.\\n    mapping(IERC20 => bool) private s_allowedTokens;\\n\\n    constructor() {\\n        i_owner = msg.sender;\\n    }\\n\\n    /* -------------------------------- Modifiers ------------------------------- */\\n    modifier checkAllowedToken(IERC20 _token) {\\n        if (!s_allowedTokens[_token]) revert UnauthorizedToken(_token);\\n        _;\\n    }\\n\\n    /* -------------------------------- Functions ------------------------------- */\\n    function deposit(IERC20 _token, uint256 _amount)\\n        external\\n        override\\n        checkNonZeroAddress(address(_token))\\n        checkNonZeroValue(_amount)\\n        checkAllowedToken(_token)\\n    {\\n        s_balanceOf[msg.sender][_token] += _amount;\\n        _token.transferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposited(msg.sender, _token, _amount);\\n    }\\n\\n    function withdraw(IERC20 _token, uint256 _amount)\\n        external\\n        override\\n        checkAllowedToken(_token)\\n    {\\n        if (s_balanceOf[msg.sender][_token] < _amount)\\n            revert NotEnoughBalance();\\n\\n        s_balanceOf[msg.sender][_token] -= _amount;\\n        _token.transfer(msg.sender, _amount);\\n\\n        emit Withdrawn(msg.sender, _token, _amount);\\n    }\\n\\n    function authorizeToken(IERC20 _token, bool _allow)\\n        external\\n        override\\n        checkExpectedCaller(msg.sender, i_owner)\\n    {\\n        s_allowedTokens[_token] = _allow;\\n\\n        emit TokenUpdated(_token, _allow);\\n    }\\n\\n    /* ---------------------------------- Views --------------------------------- */\\n    function getBalanceOf(IERC20 _token, address _user)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        balance = s_balanceOf[_user][_token];\\n    }\\n\\n    function getOwner() external view returns (address owner) {\\n        owner = i_owner;\\n    }\\n}\\n\",\"keccak256\":\"0xc3c0cd514a33c0898c4fc6d50debf30758ed73cbc9e534f265efa17d47040f4b\",\"license\":\"MIT\"},\"contracts/abstract/Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../error/Errors.sol\\\";\\r\\n\\r\\n/// @title Base\\r\\n/// @author @C-Mierez\\r\\n/// @notice Base contract that defines commonly used modifiers for other contracts\\r\\n/// to inherit.\\r\\nabstract contract Base {\\r\\n    /* -------------------------------- Modifiers ------------------------------- */\\r\\n    modifier checkNonZeroAddress(address addr) {\\r\\n        if (addr == address(0)) revert ZeroAddress();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkNonZeroValue(uint256 value) {\\r\\n        if (value == 0) revert ZeroValue();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkExpectedCaller(address caller, address expected) {\\r\\n        if (caller != expected) revert UnexpectedCaller(caller, expected);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x08ac589709411aa735c700ba76b7f17bf0c82adeaebf735b9553b8cde95f3a4d\",\"license\":\"MIT\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/* -------------------------- Global Custom Errors -------------------------- */\\r\\n\\r\\n/// @notice Emitted when the submitted address is the zero address\\r\\nerror ZeroAddress();\\r\\n\\r\\n/// @notice Emitted when the submitted value is zero.\\r\\nerror ZeroValue();\\r\\n\\r\\n/// @notice Emitted when the submitted value is zero or less\\r\\n/// @dev Technically uint can't be negative, so it wouldn't make\\r\\n/// sense for this error to happen when [value] is an uint.\\r\\n/// Hence I'm defining it as an int256 instead.\\r\\nerror ZeroOrNegativeValue(int256 value);\\r\\n\\r\\n/// @notice Emitted when the caller is not the expected address\\r\\nerror UnexpectedCaller(address caller, address expected);\\r\\n\\r\\n/// @notice Emitted when the caller does not have the required permissions\\r\\nerror UnauthorizedCaller(address caller);\\r\\n\\r\\n/* ---------------------------- ERC Token Errors ---------------------------- */\\r\\n\\r\\n/// @notice Emitted when the address does not have enough token balance\\r\\nerror NotEnoughBalance(address caller, uint256 expected);\\r\\n\\r\\n/// @notice Emitted when an ERC20 transfer fails. Catching boolean return from\\r\\n/// the transfer methods.\\r\\n/// @dev I believe it makes sense to return all the information below, since this\\r\\n/// error just catches any kind of failure. It'd likely be useful to have this\\r\\n/// information to understand what exactly went wrong.\\r\\nerror ERC20TransferFailed(address from, address to, uint256 amount);\\r\\n\",\"keccak256\":\"0x70db5163c821832bc045728f4ca052ec1398402b9686b79fc47c8e23336e7f73\",\"license\":\"MIT\"},\"contracts/interfaces/IUselessBank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ninterface IUselessBank {\\r\\n    /* --------------------------------- Structs -------------------------------- */\\r\\n\\r\\n    /* --------------------------------- Events --------------------------------- */\\r\\n    event Deposited(address user, IERC20 token, uint256 amount);\\r\\n    event Withdrawn(address user, IERC20 token, uint256 amount);\\r\\n    event TokenUpdated(IERC20 token, bool allow);\\r\\n\\r\\n    /* --------------------------------- Errors --------------------------------- */\\r\\n    /// @notice Emitted when the user's balance is lower than requested.\\r\\n    error NotEnoughBalance();\\r\\n\\r\\n    /// @notice Emitted when the submitted token is not allowed.\\r\\n    error UnauthorizedToken(IERC20 token);\\r\\n\\r\\n    /* -------------------------------- Functions ------------------------------- */\\r\\n\\r\\n    function deposit(IERC20 _token, uint256 _amount) external;\\r\\n\\r\\n    function withdraw(IERC20 _token, uint256 _amount) external;\\r\\n\\r\\n    function authorizeToken(IERC20 _token, bool _allow) external;\\r\\n\\r\\n    /* ---------------------------------- Views --------------------------------- */\\r\\n\\r\\n    function getBalanceOf(IERC20 _token, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x025aaa1902287ea7c530501af734d5b948030ea33a90e8c4d5c22f0a91537acb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060805160601c610cbd61006d6000396000818161041e01526105490152610cbd6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806347e7ef241461005c57806353290b44146100785780636561cc32146100a8578063893d20e8146100c4578063f3fef3a3146100e2575b600080fd5b61007660048036038101906100719190610927565b6100fe565b005b610092600480360381019061008d91906108a7565b610395565b60405161009f9190610ac2565b60405180910390f35b6100c260048036038101906100bd91906108e7565b61041b565b005b6100cc610545565b6040516100d991906109a3565b60405180910390f35b6100fc60048036038101906100f79190610927565b61056d565b005b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610166576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008114156101a2576040517f7c946ed700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661023157806040517fe3d87c620000000000000000000000000000000000000000000000000000000081526004016102289190610a7e565b60405180910390fd5b836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102bc9190610add565b925050819055508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610300939291906109e7565b602060405180830381600087803b15801561031a57600080fd5b505af115801561032e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610352919061087a565b507f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a733868660405161038693929190610a1e565b60405180910390a15050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b337f00000000000000000000000000000000000000000000000000000000000000008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104af5781816040517fd8a510f20000000000000000000000000000000000000000000000000000000081526004016104a69291906109be565b60405180910390fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fdcb2804db02b95bdd568fd11a31c5577ffdf36538c0f670e92930d9c1e8518ab8484604051610537929190610a99565b60405180910390a150505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b81600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105fc57806040517fe3d87c620000000000000000000000000000000000000000000000000000000081526004016105f39190610a7e565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106b1576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461073c9190610b33565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161077e929190610a55565b602060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d0919061087a565b507fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb33848460405161080493929190610a1e565b60405180910390a1505050565b60008135905061082081610c2b565b92915050565b60008135905061083581610c42565b92915050565b60008151905061084a81610c42565b92915050565b60008135905061085f81610c59565b92915050565b60008135905061087481610c70565b92915050565b6000602082840312156108905761088f610c26565b5b600061089e8482850161083b565b91505092915050565b600080604083850312156108be576108bd610c26565b5b60006108cc85828601610850565b92505060206108dd85828601610811565b9150509250929050565b600080604083850312156108fe576108fd610c26565b5b600061090c85828601610850565b925050602061091d85828601610826565b9150509250929050565b6000806040838503121561093e5761093d610c26565b5b600061094c85828601610850565b925050602061095d85828601610865565b9150509250929050565b61097081610b67565b82525050565b61097f81610b79565b82525050565b61098e81610bc1565b82525050565b61099d81610bb7565b82525050565b60006020820190506109b86000830184610967565b92915050565b60006040820190506109d36000830185610967565b6109e06020830184610967565b9392505050565b60006060820190506109fc6000830186610967565b610a096020830185610967565b610a166040830184610994565b949350505050565b6000606082019050610a336000830186610967565b610a406020830185610985565b610a4d6040830184610994565b949350505050565b6000604082019050610a6a6000830185610967565b610a776020830184610994565b9392505050565b6000602082019050610a936000830184610985565b92915050565b6000604082019050610aae6000830185610985565b610abb6020830184610976565b9392505050565b6000602082019050610ad76000830184610994565b92915050565b6000610ae882610bb7565b9150610af383610bb7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b2857610b27610bf7565b5b828201905092915050565b6000610b3e82610bb7565b9150610b4983610bb7565b925082821015610b5c57610b5b610bf7565b5b828203905092915050565b6000610b7282610b97565b9050919050565b60008115159050919050565b6000610b9082610b67565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610bcc82610bd3565b9050919050565b6000610bde82610be5565b9050919050565b6000610bf082610b97565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b610c3481610b67565b8114610c3f57600080fd5b50565b610c4b81610b79565b8114610c5657600080fd5b50565b610c6281610b85565b8114610c6d57600080fd5b50565b610c7981610bb7565b8114610c8457600080fd5b5056fea2646970667358221220a94a717ff0b915e1a0b4dd9089a6ab51aabfc9c2b69532d0f041470deb8560e564736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806347e7ef241461005c57806353290b44146100785780636561cc32146100a8578063893d20e8146100c4578063f3fef3a3146100e2575b600080fd5b61007660048036038101906100719190610927565b6100fe565b005b610092600480360381019061008d91906108a7565b610395565b60405161009f9190610ac2565b60405180910390f35b6100c260048036038101906100bd91906108e7565b61041b565b005b6100cc610545565b6040516100d991906109a3565b60405180910390f35b6100fc60048036038101906100f79190610927565b61056d565b005b81600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610166576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008114156101a2576040517f7c946ed700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661023157806040517fe3d87c620000000000000000000000000000000000000000000000000000000081526004016102289190610a7e565b60405180910390fd5b836000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102bc9190610add565b925050819055508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610300939291906109e7565b602060405180830381600087803b15801561031a57600080fd5b505af115801561032e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610352919061087a565b507f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a733868660405161038693929190610a1e565b60405180910390a15050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b337f00000000000000000000000000000000000000000000000000000000000000008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146104af5781816040517fd8a510f20000000000000000000000000000000000000000000000000000000081526004016104a69291906109be565b60405180910390fd5b82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fdcb2804db02b95bdd568fd11a31c5577ffdf36538c0f670e92930d9c1e8518ab8484604051610537929190610a99565b60405180910390a150505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b81600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105fc57806040517fe3d87c620000000000000000000000000000000000000000000000000000000081526004016105f39190610a7e565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106b1576040517fad3a8b9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461073c9190610b33565b925050819055508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161077e929190610a55565b602060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d0919061087a565b507fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb33848460405161080493929190610a1e565b60405180910390a1505050565b60008135905061082081610c2b565b92915050565b60008135905061083581610c42565b92915050565b60008151905061084a81610c42565b92915050565b60008135905061085f81610c59565b92915050565b60008135905061087481610c70565b92915050565b6000602082840312156108905761088f610c26565b5b600061089e8482850161083b565b91505092915050565b600080604083850312156108be576108bd610c26565b5b60006108cc85828601610850565b92505060206108dd85828601610811565b9150509250929050565b600080604083850312156108fe576108fd610c26565b5b600061090c85828601610850565b925050602061091d85828601610826565b9150509250929050565b6000806040838503121561093e5761093d610c26565b5b600061094c85828601610850565b925050602061095d85828601610865565b9150509250929050565b61097081610b67565b82525050565b61097f81610b79565b82525050565b61098e81610bc1565b82525050565b61099d81610bb7565b82525050565b60006020820190506109b86000830184610967565b92915050565b60006040820190506109d36000830185610967565b6109e06020830184610967565b9392505050565b60006060820190506109fc6000830186610967565b610a096020830185610967565b610a166040830184610994565b949350505050565b6000606082019050610a336000830186610967565b610a406020830185610985565b610a4d6040830184610994565b949350505050565b6000604082019050610a6a6000830185610967565b610a776020830184610994565b9392505050565b6000602082019050610a936000830184610985565b92915050565b6000604082019050610aae6000830185610985565b610abb6020830184610976565b9392505050565b6000602082019050610ad76000830184610994565b92915050565b6000610ae882610bb7565b9150610af383610bb7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b2857610b27610bf7565b5b828201905092915050565b6000610b3e82610bb7565b9150610b4983610bb7565b925082821015610b5c57610b5b610bf7565b5b828203905092915050565b6000610b7282610b97565b9050919050565b60008115159050919050565b6000610b9082610b67565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610bcc82610bd3565b9050919050565b6000610bde82610be5565b9050919050565b6000610bf082610b97565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b610c3481610b67565b8114610c3f57600080fd5b50565b610c4b81610b79565b8114610c5657600080fd5b50565b610c6281610b85565b8114610c6d57600080fd5b50565b610c7981610bb7565b8114610c8457600080fd5b5056fea2646970667358221220a94a717ff0b915e1a0b4dd9089a6ab51aabfc9c2b69532d0f041470deb8560e564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotEnoughBalance()": [
        {
          "notice": "Emitted when the user's balance is lower than requested."
        }
      ],
      "UnauthorizedToken(address)": [
        {
          "notice": "Emitted when the submitted token is not allowed."
        }
      ],
      "UnexpectedCaller(address,address)": [
        {
          "notice": "Emitted when the caller is not the expected address"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Emitted when the submitted address is the zero address"
        }
      ],
      "ZeroValue()": [
        {
          "notice": "Emitted when the submitted value is zero."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 732,
        "contract": "contracts/UselessBank.sol:UselessBank",
        "label": "s_balanceOf",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)666,t_uint256))"
      },
      {
        "astId": 738,
        "contract": "contracts/UselessBank.sol:UselessBank",
        "label": "s_allowedTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)666,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)666": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)666,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)666,t_uint256)"
      },
      "t_mapping(t_contract(IERC20)666,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)666",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)666,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)666",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}