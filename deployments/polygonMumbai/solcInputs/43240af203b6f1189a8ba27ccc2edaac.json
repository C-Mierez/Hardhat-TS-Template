{
  "language": "Solidity",
  "sources": {
    "contracts/UselessBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"./abstract/Base.sol\";\nimport \"./interfaces/IUselessBank.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract UselessBank is IUselessBank, Base {\n    address private immutable i_owner;\n\n    /// @notice Stores the user's balance of a certain token.\n    /// User -> Token -> Balance\n    mapping(address => mapping(IERC20 => uint256)) private s_balanceOf;\n\n    /// @notice Stores whether a certain token is allowed to be used.\n    mapping(IERC20 => bool) private s_allowedTokens;\n\n    constructor(IERC20 _token) checkNonZeroAddress(address(_token)) {\n        s_allowedTokens[_token] = true;\n        i_owner = msg.sender;\n    }\n\n    /* -------------------------------- Modifiers ------------------------------- */\n    modifier checkAllowedToken(IERC20 _token) {\n        if (!s_allowedTokens[_token]) revert UnauthorizedToken(_token);\n        _;\n    }\n\n    /* -------------------------------- Functions ------------------------------- */\n    function deposit(IERC20 _token, uint256 _amount)\n        external\n        override\n        checkNonZeroAddress(address(_token))\n        checkNonZeroValue(_amount)\n        checkAllowedToken(_token)\n    {\n        s_balanceOf[msg.sender][_token] += _amount;\n\n        emit Deposited(msg.sender, _token, _amount);\n\n        _token.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function withdraw(IERC20 _token, uint256 _amount)\n        external\n        override\n        checkNonZeroAddress(address(_token))\n        checkNonZeroValue(_amount)\n        checkAllowedToken(_token)\n    {\n        if (s_balanceOf[msg.sender][_token] < _amount)\n            revert NotEnoughBalance();\n\n        s_balanceOf[msg.sender][_token] -= _amount;\n\n        emit Withdrawn(msg.sender, _token, _amount);\n\n        _token.transfer(msg.sender, _amount);\n    }\n\n    function authorizeToken(IERC20 _token, bool _allow)\n        external\n        override\n        checkNonZeroAddress(address(_token))\n        checkExpectedCaller(msg.sender, i_owner)\n    {\n        s_allowedTokens[_token] = _allow;\n\n        emit TokenUpdated(_token, _allow);\n    }\n\n    /* ---------------------------------- Views --------------------------------- */\n    function getBalanceOf(IERC20 _token, address _user)\n        external\n        view\n        override\n        returns (uint256 balance)\n    {\n        balance = s_balanceOf[_user][_token];\n    }\n\n    function getOwner() external view returns (address owner) {\n        owner = i_owner;\n    }\n\n    function isAuthorized(IERC20 _token) external view returns (bool) {\n        return s_allowedTokens[_token];\n    }\n}\n"
    },
    "contracts/abstract/Base.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"../error/Errors.sol\";\r\n\r\n/// @title Base\r\n/// @author @C-Mierez\r\n/// @notice Base contract that defines commonly used modifiers for other contracts\r\n/// to inherit.\r\nabstract contract Base {\r\n    /* -------------------------------- Modifiers ------------------------------- */\r\n    modifier checkNonZeroAddress(address addr) {\r\n        if (addr == address(0)) revert ZeroAddress();\r\n        _;\r\n    }\r\n\r\n    modifier checkNonZeroValue(uint256 value) {\r\n        if (value == 0) revert ZeroValue();\r\n        _;\r\n    }\r\n\r\n    modifier checkExpectedCaller(address caller, address expected) {\r\n        if (caller != expected) revert UnexpectedCaller(caller, expected);\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IUselessBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\r\n\r\ninterface IUselessBank {\r\n    /* --------------------------------- Structs -------------------------------- */\r\n\r\n    /* --------------------------------- Events --------------------------------- */\r\n    event Deposited(address user, IERC20 token, uint256 amount);\r\n    event Withdrawn(address user, IERC20 token, uint256 amount);\r\n    event TokenUpdated(IERC20 token, bool allow);\r\n\r\n    /* --------------------------------- Errors --------------------------------- */\r\n    /// @notice Emitted when the user's balance is lower than requested.\r\n    error NotEnoughBalance();\r\n\r\n    /// @notice Emitted when the submitted token is not allowed.\r\n    error UnauthorizedToken(IERC20 token);\r\n\r\n    /* -------------------------------- Functions ------------------------------- */\r\n\r\n    function deposit(IERC20 _token, uint256 _amount) external;\r\n\r\n    function withdraw(IERC20 _token, uint256 _amount) external;\r\n\r\n    function authorizeToken(IERC20 _token, bool _allow) external;\r\n\r\n    /* ---------------------------------- Views --------------------------------- */\r\n\r\n    function getBalanceOf(IERC20 _token, address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "contracts/error/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.4;\r\n\r\n/* -------------------------- Global Custom Errors -------------------------- */\r\n\r\n/// @notice Emitted when the submitted address is the zero address\r\nerror ZeroAddress();\r\n\r\n/// @notice Emitted when the submitted value is zero.\r\nerror ZeroValue();\r\n\r\n/// @notice Emitted when the submitted value is zero or less\r\n/// @dev Technically uint can't be negative, so it wouldn't make\r\n/// sense for this error to happen when [value] is an uint.\r\n/// Hence I'm defining it as an int256 instead.\r\nerror ZeroOrNegativeValue(int256 value);\r\n\r\n/// @notice Emitted when the caller is not the expected address\r\nerror UnexpectedCaller(address caller, address expected);\r\n\r\n/// @notice Emitted when the caller does not have the required permissions\r\nerror UnauthorizedCaller(address caller);\r\n\r\n/* ---------------------------- ERC Token Errors ---------------------------- */\r\n\r\n/// @notice Emitted when the address does not have enough token balance\r\nerror NotEnoughBalance(address caller, uint256 expected);\r\n\r\n/// @notice Emitted when an ERC20 transfer fails. Catching boolean return from\r\n/// the transfer methods.\r\n/// @dev I believe it makes sense to return all the information below, since this\r\n/// error just catches any kind of failure. It'd likely be useful to have this\r\n/// information to understand what exactly went wrong.\r\nerror ERC20TransferFailed(address from, address to, uint256 amount);\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}